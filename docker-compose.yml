version: "3.5"
services:
  
  # Portainer para gerenciar os Dockerfiles
  portainer:
    image: portainer/portainer:latest
    container_name: portainer
    restart: always
    ports:
    - ${PORTAINER_PORT}
    networks:
    - backend
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - portainer-data:/data
    
  # microservice para controlar o Arduino
  ms-arduino:
    build: "./ms-arduino/"
    container_name: ms-arduino #image: hpbonfim/ardueve-microservice-arduino:latest
    restart: always
    privileged: true
    devices:
    - /dev:/dev
    ports:
      - ${PORT_MS_ARDUINO}
    networks:
      backend:
        ipv4_address: ${IP_MS_ARDUINO}
    entrypoint:
    - "/usr/local/bin/docker-entrypoint.sh"

  # microservice para controlar o BackEnd (NODEJS)
  ms-backend:
    build: "./ms-backend/"
    container_name: ms-backend #image: hpbonfim/ardueve-microservice-backend:latest
    restart: always
    privileged: true
    depends_on:
      - ms-arduino
      - mongo-express
      - mongo
    ports:
      - ${PORT_MS_BACKEND}
    networks:
      backend:
        ipv4_address: ${IP_MS_BACKEND}
    entrypoint:
    - '/usr/local/bin/docker-entrypoint.sh'

  # microservice para controlar o FrontEnd (VUE)
  ms-frontend:
    build: "./ms-frontend/"
    container_name: ms-frontend #image: hpbonfim/ardueve-microservice-frontend:latest
    restart: always
    depends_on:
      - ms-backend
    ports:
    - ${PORT_MS_FRONTEND}
    networks:
      frontend: 
        ipv4_address: ${NET_IP_FRONTEND}
      backend:
        ipv4_address: ${IP_MS_FRONTEND}

  # microservice para controlar o Banco de Dados (MONGOOSE)
  mongo:
    image: mongo:latest
    container_name: mongo
    restart: always
    command: --smallfiles
    volumes:
    - mongo-database:/data
    networks:
    - backend
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: ${DB_GUY}
    #   MONGO_INITDB_ROOT_PASSWORD: ${DB_SUPERKEY}

  # mongo-express para controle do mongo
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-board
    restart: always
    depends_on:
    - mongo
    ports:
    - ${DB_PORT}
    networks:
    - backend
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: ${DB_ADMIN}
      ME_CONFIG_BASICAUTH_PASSWORD: ${DB_KEY}
  
  # microservice para fazer deploy automático para o Firebase(PQ TO COM PREGUIÇA)
# configuração dos newtworks 
networks:
  frontend:
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: ${SUBNET_FRONTEND}

  backend:
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: ${SUBNET_BACKEND}

volumes:
  mongo-database:
  portainer-data: